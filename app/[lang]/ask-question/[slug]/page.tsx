"use client";
import { usePathname, useRouter } from "next/navigation"; // <- –≤–æ—Ç –∑–¥–µ—Å—å –ø–æ–º–µ–Ω—è–ª
import React, { useState } from "react";
export const dynamic = "force-dynamic";

export default function QuestionAnswersPage() {
  const [newAnswer, setNewAnswer] = useState("");
  const [showAnswerForm, setShowAnswerForm] = useState(false);
  const router = useRouter();
  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
  const question = {
    id: 1,
    question: "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç –±–µ–∑ —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö?",
    author: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú.",
    date: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
    category: "–î–æ–∫—É–º–µ–Ω—Ç—ã",
    views: 156,
    likes: 23,
    isLiked: false,
    description:
      "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö. –†–∞–±–æ—Ç–∞—é –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, –Ω–æ –∏–º–µ—é —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥. –ö–∞–∫–∏–µ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã?",
    icon: "üë§",
    color: "from-blue-500 to-blue-600",
  };

  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–æ–≤
  const [answers, setAnswers] = useState([
    {
      id: 1,
      author: "–≠–∫—Å–ø–µ—Ä—Ç –§—ñ–Ω–æ–≥–ª—è–¥",
      isExpert: true,
      date: "1 —á–∞—Å –Ω–∞–∑–∞–¥",
      likes: 15,
      isLiked: false,
      answer:
        "–î–∞, —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ú–Ω–æ–≥–∏–µ –Ω–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –±–µ–∑ —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö. –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n‚Ä¢ –≠–∫—Å–ø—Ä–µ—Å—Å-–∫—Ä–µ–¥–∏—Ç—ã –¥–æ 50 000 –≥—Ä–Ω\n‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã –ø–æ–¥ –∑–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã –¥–ª—è –§–û–ü —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º\n‚Ä¢ P2P –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ\n\n–û–¥–Ω–∞–∫–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—à–µ, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.",
      isHelpful: true,
      helpfulCount: 12,
      avatar: "üéØ",
    },
    {
      id: 2,
      author: "–ú–∞—Ä–∏—è –ö.",
      isExpert: false,
      date: "45 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
      likes: 8,
      isLiked: true,
      answer:
        "–Ø –ø–æ–ª—É—á–∞–ª–∞ —Ç–∞–∫–æ–π –∫—Ä–µ–¥–∏—Ç –≤ –ö—Ä–µ–¥–∏—Ç–æ—Ä–µ. –ù—É–∂–µ–Ω –±—ã–ª —Ç–æ–ª—å–∫–æ –ø–∞—Å–ø–æ—Ä—Ç –∏ –ò–ù–ù. –ü—Ä–∞–≤–¥–∞, —Å—É–º–º–∞ –±—ã–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è - 25 000 –≥—Ä–Ω –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤. –°—Ç–∞–≤–∫–∞ 2,5% –≤ –º–µ—Å—è—Ü. –û–¥–æ–±—Ä–∏–ª–∏ –∑–∞ 20 –º–∏–Ω—É—Ç.",
      isHelpful: false,
      helpfulCount: 8,
      avatar: "üë©",
    },
    {
      id: 3,
      author: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ò–≤–∞–Ω",
      isExpert: true,
      date: "30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
      likes: 11,
      isLiked: false,
      answer:
        "–î–æ–ø–æ–ª–Ω—é –æ—Ç–≤–µ—Ç –∫–æ–ª–ª–µ–≥–∏. –¢–∞–∫–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n1. –ö—Ä–µ–¥–∏—Ç —Å —Å–æ–∑–∞–µ–º—â–∏–∫–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º)\n2. –ú–∏–∫—Ä–æ–∑–∞–π–º—ã - –¥–æ 20 000 –≥—Ä–Ω –±–µ–∑ —Å–ø—Ä–∞–≤–æ–∫\n3. –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å –ª—å–≥–æ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º\n\n–í–∞–∂–Ω–æ: –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –∏ –Ω–µ —Å–æ–≥–ª–∞—à–∞–π—Ç–µ—Å—å –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–µ —Å—Ç–∞–≤–∫–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.",
      isHelpful: true,
      helpfulCount: 9,
      avatar: "üë®‚Äçüíº",
    },
  ]);

  const handleLikeQuestion = () => {
    // –õ–æ–≥–∏–∫–∞ –ª–∞–π–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
  };

  const handleLikeAnswer = (answerId: number) => {
    setAnswers(
      answers.map((answer) =>
        answer.id === answerId
          ? {
              ...answer,
              isLiked: !answer.isLiked,
              likes: answer.isLiked ? answer.likes - 1 : answer.likes + 1,
            }
          : answer
      )
    );
  };

  const handleMarkHelpful = (answerId: number) => {
    setAnswers(
      answers.map((answer) =>
        answer.id === answerId
          ? {
              ...answer,
              isHelpful: !answer.isHelpful,
              helpfulCount: answer.isHelpful
                ? answer.helpfulCount - 1
                : answer.helpfulCount + 1,
            }
          : answer
      )
    );
  };

  const handleSubmitAnswer = () => {
    if (newAnswer.trim()) {
      const answer = {
        id: answers.length + 1,
        author: "–í—ã",
        isExpert: false,
        date: "—Ç–æ–ª—å–∫–æ —á—Ç–æ",
        likes: 0,
        isLiked: false,
        answer: newAnswer,
        isHelpful: false,
        helpfulCount: 0,
        avatar: "üòä",
      };

      setAnswers([...answers, answer]);
      setNewAnswer("");
      setShowAnswerForm(false);
    }
  };

  const pathname = usePathname(); // –Ω–∞–ø—Ä–∏–º–µ—Ä "/ru/ask-question/test"

  const localePrefix = pathname.split("/")[1]; // "ru"

  const handleBackToFAQ = () => {
    router.push(`/${localePrefix}/ask-question`);
  };

  return (
    <div className="min-h-screen">
      <div className="max-w-4xl mx-auto">
        {/* Back Button */}
        <button
          onClick={handleBackToFAQ}
          className="mb-6 cursor-pointer flex items-center gap-2 text-blue-600 hover:text-blue-800 transition-colors duration-200 font-medium"
        >
          <svg
            className="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M15 19l-7-7 7-7"
            />
          </svg>
          –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º
        </button>

        {/* Question Section */}
        <div className="bg-white rounded-3xl shadow-xl border border-gray-100 p-8 mb-8">
          <div className="flex items-start gap-6">
            {/* Icon */}
            <div
              className={`w-16 h-16 bg-gradient-to-br ${question.color} rounded-2xl flex items-center justify-center text-white text-2xl flex-shrink-0`}
            >
              {question.icon}
            </div>

            {/* Content */}
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-4">
                <span className="font-semibold text-gray-700">
                  {question.author}
                </span>
                <span className="text-gray-400">‚Ä¢</span>
                <span className="text-gray-500">{question.date}</span>
                <span
                  className={`text-xs px-3 py-1 rounded-full font-medium bg-gradient-to-r ${question.color} text-white`}
                >
                  {question.category}
                </span>
              </div>

              <h1 className="text-2xl md:text-3xl font-bold text-gray-800 mb-4">
                {question.question}
              </h1>

              <p className="text-gray-600 text-lg leading-relaxed mb-6">
                {question.description}
              </p>

              {/* Stats */}
              <div className="flex items-center gap-6">
                <div className="flex items-center gap-2 text-gray-500">
                  <svg
                    className="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    />
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                    />
                  </svg>
                  <span>{question.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
                </div>

                <button
                  onClick={handleLikeQuestion}
                  className={`flex items-center gap-2 px-4 py-2 rounded-xl transition-all duration-200 ${
                    question.isLiked
                      ? "bg-red-100 text-red-600"
                      : "bg-gray-100 text-gray-600 hover:bg-red-50 hover:text-red-500"
                  }`}
                >
                  <svg
                    className="w-5 h-5"
                    fill={question.isLiked ? "currentColor" : "none"}
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                    />
                  </svg>
                  <span>{question.likes}</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Answers Section */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-800">
              –û—Ç–≤–µ—Ç—ã ({answers.length})
            </h2>

            <button
              onClick={() => setShowAnswerForm(true)}
              className="bg-gradient-to-r from-blue-500 to-yellow-400 text-white px-6 py-3 rounded-2xl font-semibold flex items-center gap-2 hover:shadow-lg transition-all duration-300 hover:scale-105"
            >
              <span className="text-lg">‚úèÔ∏è</span>
              –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
            </button>
          </div>

          {/* Answers List */}
          <div className="space-y-6">
            {answers.map((answer, index) => (
              <div
                key={answer.id}
                className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6"
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <div className="flex items-start gap-4">
                  {/* Avatar */}
                  <div
                    className={`w-12 h-12 ${
                      answer.isExpert
                        ? "bg-gradient-to-br from-green-500 to-green-600"
                        : "bg-gradient-to-br from-gray-500 to-gray-600"
                    } rounded-xl flex items-center justify-center text-white text-xl flex-shrink-0`}
                  >
                    {answer.avatar}
                  </div>

                  {/* Content */}
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-3">
                      <span className="font-semibold text-gray-700">
                        {answer.author}
                      </span>
                      {answer.isExpert && (
                        <span className="bg-gradient-to-r from-green-500 to-green-600 text-white text-xs px-2 py-1 rounded-full font-medium">
                          ‚úÖ –≠–∫—Å–ø–µ—Ä—Ç
                        </span>
                      )}
                      <span className="text-gray-400">‚Ä¢</span>
                      <span className="text-gray-500">{answer.date}</span>
                    </div>

                    <div className="text-gray-700 leading-relaxed mb-4 whitespace-pre-line">
                      {answer.answer}
                    </div>

                    {/* Actions */}
                    <div className="flex items-center gap-4">
                      <button
                        onClick={() => handleLikeAnswer(answer.id)}
                        className={`flex items-center gap-2 px-3 py-2 rounded-xl text-sm transition-all duration-200 ${
                          answer.isLiked
                            ? "bg-blue-100 text-blue-600"
                            : "bg-gray-100 text-gray-600 hover:bg-blue-50 hover:text-blue-500"
                        }`}
                      >
                        <svg
                          className="w-4 h-4"
                          fill={answer.isLiked ? "currentColor" : "none"}
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5"
                          />
                        </svg>
                        <span>{answer.likes}</span>
                      </button>

                      <button
                        onClick={() => handleMarkHelpful(answer.id)}
                        className={`flex items-center gap-2 px-3 py-2 rounded-xl text-sm transition-all duration-200 ${
                          answer.isHelpful
                            ? "bg-green-100 text-green-600"
                            : "bg-gray-100 text-gray-600 hover:bg-green-50 hover:text-green-500"
                        }`}
                      >
                        <span>‚ú®</span>
                        <span>–ü–æ–ª–µ–∑–Ω–æ ({answer.helpfulCount})</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Answer Form */}
        {showAnswerForm && (
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4">
              –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
            </h3>

            <textarea
              value={newAnswer}
              onChange={(e) => setNewAnswer(e.target.value)}
              placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏–ª–∏ –∑–Ω–∞–Ω–∏—è–º–∏..."
              rows={6}
              className="w-full px-4 py-3 border border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none mb-4"
            />

            <div className="flex items-center gap-3">
              <button
                onClick={handleSubmitAnswer}
                className="bg-gradient-to-r from-blue-500 to-yellow-400 text-white px-6 py-3 rounded-2xl font-semibold hover:shadow-lg transition-all duration-300 hover:scale-105"
              >
                –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
              </button>

              <button
                onClick={() => setShowAnswerForm(false)}
                className="bg-gray-100 text-gray-700 px-6 py-3 rounded-2xl font-semibold hover:bg-gray-200 transition-all duration-200"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        )}

        {/* Related Questions */}
        <div className="mt-12">
          <h3 className="text-2xl font-bold text-gray-800 mb-6">
            –ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã
          </h3>

          <div className="grid gap-4">
            {[
              {
                id: 2,
                question: "–ö–∞–∫–∏–µ –±–∞–Ω–∫–∏ –¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã —Å 18 –ª–µ—Ç?",
                category: "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
                answers: 3,
                color: "from-green-500 to-green-600",
              },
              {
                id: 3,
                question: "–í–ª–∏—è–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é?",
                category: "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
                answers: 5,
                color: "from-purple-500 to-purple-600",
              },
              {
                id: 4,
                question:
                  "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç —Å –ø–ª–æ—Ö–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π?",
                category: "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
                answers: 7,
                color: "from-red-500 to-red-600",
              },
            ].map((item, index) => (
              <div
                key={item.id}
                className="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 p-4 cursor-pointer group"
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <h4 className="font-semibold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors duration-300">
                      {item.question}
                    </h4>
                    <div className="flex items-center gap-3">
                      <span
                        className={`text-xs px-2 py-1 rounded-full font-medium bg-gradient-to-r ${item.color} text-white`}
                      >
                        {item.category}
                      </span>
                      <span className="text-sm text-gray-500">
                        {item.answers} –æ—Ç–≤–µ—Ç{item.answers > 1 ? "–∞" : ""}
                      </span>
                    </div>
                  </div>

                  <svg
                    className="w-5 h-5 text-gray-400 group-hover:text-blue-500 transition-colors duration-300"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
